File path: d:\OneDrive\Desktop\bla\dictionary\theme.js

// This file contains the theme toggle functionality for the dictionary web application.
document.getElementById('theme-toggle').onclick = function() {
    const theme = document.body.getAttribute('data-theme');
    document.body.setAttribute('data-theme', theme === 'dark' ? '' : 'dark');
};

File path: d:\OneDrive\Desktop\bla\dictionary\categories.js

// This file manages the categories for the dictionary application.
let categories = ["general", "business", "academic", "travel"];
try {
    const savedCategories = localStorage.getItem("categories");
    if (savedCategories) categories = JSON.parse(savedCategories);
} catch (e) { }

function updateCategoryDropdown() {
    const selects = [
        ...document.querySelectorAll(".categories-select"),
        ...["flashcardCategory","quizCategory","memoryCategory","typingCategory","hangmanCategory","wordSearchCategory","filterCategory"].map(id=>document.getElementById(id)).filter(Boolean)
    ];
    selects.forEach(select => {
        select.innerHTML = '';
        if (select.id === "filterCategory" || select.id === "flashcardCategory" || select.id === "quizCategory" || select.id === "memoryCategory" || select.id === "typingCategory" || select.id === "hangmanCategory" || select.id === "wordSearchCategory") {
            const allOpt = document.createElement("option");
            allOpt.value = "all";
            allOpt.textContent = "All Categories";
            select.appendChild(allOpt);
        } else {
            const selOpt = document.createElement("option");
            selOpt.value = "";
            selOpt.textContent = "Select Category";
            select.appendChild(selOpt);
        }
        categories.forEach(cat => {
            const opt = document.createElement("option");
            opt.value = cat;
            opt.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
            select.appendChild(opt);
        });
        let user = localStorage.getItem('currentUser');
        const lastCat = user ? localStorage.getItem('lastCategory_' + user) : null;
        if (select.id === "category") {
            if (lastCat && categories.includes(lastCat)) {
                select.value = lastCat;
            }
        }
    });
}

function saveCategories() {
    try { localStorage.setItem("categories", JSON.stringify(categories)); } catch (e) { }
}

function addCustomCategory() {
    const newCategoryInput = document.getElementById("newCategory");
    const newCategory = newCategoryInput.value.trim().toLowerCase();
    if (!newCategory) { showMessage("Category name cannot be empty", "error"); return; }
    if (categories.includes(newCategory)) { showMessage("Category already exists", "error"); return; }
    categories.push(newCategory);
    saveCategories();
    updateCategoryDropdown();
    displayCategoryFolders();
    newCategoryInput.value = "";
    showMessage("Category added successfully!");
}

function deleteCategory(category) {
    if (!confirm(`Are you sure you want to delete the category "${category}"? This will also delete all words in this category.`)) return;
    categories = categories.filter(cat => cat !== category);
    vocabulary = vocabulary.filter(word => word.category !== category);
    saveCategories();
    saveVocabulary();
    updateCategoryDropdown();
    displayCategoryFolders();
    displayDictionary();
    showMessage(`Category "${category}" and its words have been deleted.`, "success");
}

File path: d:\OneDrive\Desktop\bla\dictionary\vocabulary.js

// This file manages the vocabulary for the dictionary application.
let vocabulary = [];
try {
    const savedVocab = localStorage.getItem('vocabulary');
    vocabulary = savedVocab ? JSON.parse(savedVocab) : [];
} catch (e) { }

function saveVocabulary() {
    try { localStorage.setItem('vocabulary', JSON.stringify(vocabulary)); } catch (e) { }
}

function addWord() {
    const wordInput = document.getElementById('word');
    const translationInput = document.getElementById('translation');
    const categorySelect = document.getElementById('category');
    const word = wordInput.value.trim();
    const translation = translationInput.value.trim();
    const category = categorySelect.value;
    if (!category) { showMessage('Please select a category', 'error'); return; }
    if (vocabulary.some(item => item.word.toLowerCase() === word.toLowerCase())) {
        showMessage('This word already exists in your dictionary', 'error'); return;
    }
    const newWord = {
        id: Date.now(),
        word: word,
        translation: translation,
        category: category,
        dateAdded: new Date().toISOString()
    };
    vocabulary.push(newWord);
    saveVocabulary();
    localStorage.setItem('lastCategory', category);
    if (window.saveLastCategory) saveLastCategory(category);
    document.getElementById('addWordForm').reset();
    showMessage('Word added successfully!');
    updateStats();
    displayDictionary();
}

function deleteWord(id) {
    if (confirm('Are you sure you want to delete this word?')) {
        vocabulary = vocabulary.filter(item => item.id !== id);
        saveVocabulary();
        updateStats();
        displayDictionary();
        showMessage('Word deleted successfully');
    }
}

function displayDictionary(wordsToDisplay = vocabulary) {
    const grid = document.getElementById('dictionaryGrid');
    grid.innerHTML = '';
    if (wordsToDisplay.length === 0) {
        grid.innerHTML = '<p>No words found. Add some words to your dictionary!</p>';
        return;
    }
    wordsToDisplay.forEach(item => {
        const wordDiv = document.createElement('div');
        wordDiv.textContent = item.word;
        const translationDiv = document.createElement('div');
        translationDiv.textContent = item.translation;
        const categoryDiv = document.createElement('div');
        categoryDiv.textContent = item.category;
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.textContent = 'Delete';
        deleteBtn.onclick = () => deleteWord(item.id);
        grid.appendChild(wordDiv);
        grid.appendChild(translationDiv);
        grid.appendChild(categoryDiv);
        grid.appendChild(deleteBtn);
    });
}

File path: d:\OneDrive\Desktop\bla\dictionary\games.js

// This file manages the games in the dictionary application.
function switchTab(tabName) {
    document.querySelectorAll('.game-container').forEach(container => {
        container.classList.remove('active');
    });
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById(tabName).classList.add('active');
    document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
}

// Flashcards
let currentCards = [];
let currentCardIndex = 0;
function startFlashcards() {
    const category = document.getElementById('flashcardCategory').value;
    currentCards = category === 'all' ? [...vocabulary] : vocabulary.filter(word => word.category === category);
    if (currentCards.length === 0) { alert('No words available for selected category'); return; }
    currentCards = shuffleArray(currentCards);
    currentCardIndex = 0;
    document.querySelector('.flashcard').classList.remove('flipped');
    updateFlashcard();
}

function updateFlashcard() {
    if (currentCards.length === 0) return;
    const card = currentCards[currentCardIndex];
    document.getElementById('cardWord').textContent = card.word;
    document.getElementById('cardTranslation').textContent = card.translation;
    document.getElementById('cardProgress').textContent = `${currentCardIndex + 1}/${currentCards.length}`;
}

function flipCard() {
    document.querySelector('.flashcard').classList.toggle('flipped');
}

function nextCard() {
    if (currentCardIndex < currentCards.length - 1) {
        currentCardIndex++;
        updateFlashcard();
        document.querySelector('.flashcard').classList.remove('flipped');
    }
}

function previousCard() {
    if (currentCardIndex > 0) {
        currentCardIndex--;
        updateFlashcard();
        document.querySelector('.flashcard').classList.remove('flipped');
    }
}

// Quiz Game
function startQuiz() {
    const category = document.getElementById('quizCategory').value;
    const wordCount = parseInt(document.getElementById('quizWordCount').value, 10) || 10;
    const words = category === 'all' ? [...vocabulary] : vocabulary.filter(word => word.category === category);
    if (words.length < wordCount) {
        alert(`Not enough words available for the selected category. You need at least ${wordCount} words.`);
        return;
    }
    const shuffledWords = shuffleArray(words);
    const quizContent = document.getElementById('quizContent');
    quizContent.innerHTML = '';
    let quizExercises = [];
    for (let i = 0; i < Math.min(wordCount, shuffledWords.length); i++) {
        const exerciseType = Math.random() < 0.5 ? 0 : 1;
        const correctWord = shuffledWords[i];
        if (exerciseType === 0) {
            const direction = Math.random() < 0.5 ? 0 : 1;
            let questionText, correctAnswer, options;
            if (direction === 0) {
                questionText = `What is the translation of "<b>${correctWord.word}</b>"?`;
                correctAnswer = correctWord.translation;
                options = [correctAnswer];
                while (options.length < 4) {
                    const randomWord = words[Math.floor(Math.random() * words.length)].translation;
                    if (!options.includes(randomWord)) options.push(randomWord);
                }
            } else {
                questionText = `Which word means "<b>${correctWord.translation}</b>"?`;
                correctAnswer = correctWord.word;
                options = [correctAnswer];
                while (options.length < 4) {
                    const randomWord = words[Math.floor(Math.random() * words.length)].word;
                    if (!options.includes(randomWord)) options.push(randomWord);
                }
            }
            const shuffledOptions = shuffleArray(options);
            const questionDiv = document.createElement('div');
            questionDiv.className = 'quiz-question';
            questionDiv.innerHTML = `
                <p>${questionText}</p>
                <div class="quiz-options">
                    ${shuffledOptions.map((option, index) => `
                        <div class="quiz-option-row" onclick="selectQuizOption(this, ${i})">
                            <input type="radio" class="quiz-option-radio" name="q${i}" value="${option}">
                            <span class="quiz-option-label">${option}</span>
                        </div>
                    `).join('')}
                </div>
            `;
            quizContent.appendChild(questionDiv);
            quizExercises.push({type: 'mc', correct: correctAnswer});
        } else {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'quiz-question';
            questionDiv.innerHTML = `
                <p>Type the word for "<b>${correctWord.translation}</b>":</p>
                <input type="text" class="quiz-spelling-input" data-answer="${correctWord.word}" autocomplete="off" style="font-size:1.1rem;padding:0.5rem;border-radius:6px;border:1.5px solid #a4bad8;width:80%;">
            `;
            quizContent.appendChild(questionDiv);
            quizExercises.push({type: 'spelling', correct: correctWord.word});
        }
    }
    const submitButton = document.createElement('button');
    submitButton.textContent = 'Submit Quiz';
    submitButton.onclick = () => checkQuizAnswersMixed(quizExercises);
    quizContent.appendChild(submitButton);
}

function checkQuizAnswersMixed(quizExercises) {
    let score = 0;
    document.querySelectorAll('.quiz-question').forEach((questionDiv, i) => {
        if (quizExercises[i].type === 'mc') {
            const selectedOption = questionDiv.querySelector('input[type="radio"]:checked');
            const optionRows = questionDiv.querySelectorAll('.quiz-option-row');
            optionRows.forEach(row => {
            });
            if (selectedOption && selectedOption.value === quizExercises[i].correct) score++;
        } else if (quizExercises[i].type === 'spelling') {…}
    });
    const quizResults = document.getElementById('quizResults');
    quizResults.textContent = `You scored ${score} out of ${quizExercises.length}!`;
}

function selectQuizOption(row, qIndex) {
    const parent = row.parentElement;
    Array.from(parent.children).forEach(child => child.classList.remove('selected'));
    row.classList.add('selected');
    row.querySelector('input[type="radio"]').checked = true;
}

File path: d:\OneDrive\Desktop\bla\dictionary\main.js

// This file initializes the application and handles the loading of different components.
document.addEventListener("DOMContentLoaded", () => {
    updateCategoryDropdown();
    displayCategoryFolders();
    updateStats();
    displayDictionary();
});